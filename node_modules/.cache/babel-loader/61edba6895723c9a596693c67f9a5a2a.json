{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/facundo/Henry/InterviewAgilika/src/components/ModalSizeParking.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Modal, Button, Form } from \"react-bootstrap\";\n\nconst ModalSizeParking = props => {\n  _s();\n\n  const {\n    modalShow,\n    modalClose,\n    setParkingSize\n  } = props;\n  const [size, setSize] = useState({\n    1: 5,\n    2: 5,\n    3: 5\n  });\n\n  const onChange = e => {\n    setSize({ ...size,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: modalShow,\n    onHide: () => modalClose(),\n    size: \"lg\",\n    \"aria-labelledby\": \"contained-modal-title-vcenter\",\n    centered: true,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        id: \"contained-modal-title-vcenter\",\n        children: \"Choose the size of the parking\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The default size is 5 spaces for each\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        style: {\n          display: \"flex\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Small\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"number\",\n            placeholder: \"Small\",\n            name: \"1\",\n            value: size[1],\n            onChange: e => onChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Medium\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"number\",\n            placeholder: \"Medium\",\n            name: \"2\",\n            value: size[2],\n            onChange: e => onChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Large\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"number\",\n            placeholder: \"Large\",\n            name: \"3\",\n            value: size[3],\n            onChange: e => onChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"success\",\n        onClick: e => {\n          setParkingSize(size);\n          modalClose();\n        },\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"danger\",\n        onClick: modalClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 13\n  }, this);\n};\n\n_s(ModalSizeParking, \"p8IPckWphf7sYE1oaz2wAjiSdSs=\");\n\n_c = ModalSizeParking;\nexport default ModalSizeParking;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalSizeParking\");","map":{"version":3,"sources":["/home/facundo/Henry/InterviewAgilika/src/components/ModalSizeParking.jsx"],"names":["React","useState","Modal","Button","Form","ModalSizeParking","props","modalShow","modalClose","setParkingSize","size","setSize","onChange","e","target","name","value","display"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Modal, Button, Form } from \"react-bootstrap\";\n\nconst ModalSizeParking = (props) => {\n      const { modalShow, modalClose, setParkingSize } = props;\n\n      const [size, setSize] = useState({\n            1:5,\n            2:5,\n            3:5\n      })\n\n      const onChange = (e) => {\n            setSize({\n                  ...size,\n                  [e.target.name]: e.target.value\n            })\n      }\n\n      return (\n            <Modal\n                  show={modalShow}\n                  onHide={() => modalClose()}\n                  size=\"lg\"\n                  aria-labelledby=\"contained-modal-title-vcenter\"\n                  centered\n            >\n                  <Modal.Header closeButton>\n                        <Modal.Title id=\"contained-modal-title-vcenter\">\n                              Choose the size of the parking\n                        </Modal.Title>\n                  </Modal.Header>\n                  <Modal.Body>\n                        <p>The default size is 5 spaces for each</p>\n                        <Form.Group style={{ display: \"flex\" }}>\n                              <Form.Group>\n                                    <Form.Label>Small</Form.Label>\n                                    <Form.Control\n                                          type=\"number\"\n                                          placeholder=\"Small\"\n                                          name=\"1\"\n                                          value={size[1]}\n                                          onChange={e => onChange(e)}\n                                    />\n                              </Form.Group>\n                              <Form.Group>\n                                    <Form.Label>Medium</Form.Label>\n                                    <Form.Control\n                                          type=\"number\"\n                                          placeholder=\"Medium\"\n                                          name=\"2\"\n                                          value={size[2]}\n                                          onChange={e => onChange(e)}\n                                    />\n                              </Form.Group>\n                              <Form.Group>\n                                    <Form.Label>Large</Form.Label>\n                                    <Form.Control\n                                          type=\"number\"\n                                          placeholder=\"Large\"\n                                          name=\"3\"\n                                          value={size[3]}\n                                          onChange={e => onChange(e)}\n                                    />\n                              </Form.Group>\n                        </Form.Group>\n                  </Modal.Body>\n                  <Modal.Footer>\n                        <Button variant='success' onClick={e => {setParkingSize(size); modalClose()}}>Save</Button>\n                        <Button variant='danger' onClick={modalClose}>Close</Button>\n                  </Modal.Footer>\n            </Modal>\n      );\n};\n\nexport default ModalSizeParking;\n"]},"metadata":{},"sourceType":"module"}